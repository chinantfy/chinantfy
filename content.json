{"meta":{"title":"Chinantfy'Blogs","subtitle":"倚楼听风雨，淡看江湖路","description":null,"author":"chinantfy","url":"https://chinantfy.gitee.io","root":"/"},"pages":[{"title":"archives 归档","date":"2019-11-12T16:05:31.000Z","updated":"2020-02-24T15:36:17.904Z","comments":true,"path":"archives/index.html","permalink":"https://chinantfy.gitee.io/archives/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-11-12T16:05:40.000Z","updated":"2020-02-24T15:36:17.904Z","comments":true,"path":"tags/index.html","permalink":"https://chinantfy.gitee.io/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-11-12T16:04:08.000Z","updated":"2020-02-24T15:36:17.904Z","comments":true,"path":"categories/index.html","permalink":"https://chinantfy.gitee.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"git常用命令","slug":"10.git常用命令","date":"2020-02-24T15:55:30.000Z","updated":"2020-02-24T16:25:59.264Z","comments":true,"path":"2020/02/24/10.git常用命令/","link":"","permalink":"https://chinantfy.gitee.io/2020/02/24/10.git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"初始化目录1git init提交文件到缓存区1git add readme.txt提交文件到仓库1git commit -m &quot;wrote a readme file&quot; #-m后面是对于本次提交的注释说明","text":"初始化目录1git init提交文件到缓存区1git add readme.txt提交文件到仓库1git commit -m &quot;wrote a readme file&quot; #-m后面是对于本次提交的注释说明 可以多次add不同文件，一次提交多个文件123git add file1.txtgit add file2.txt file3.txtgit commit -m &quot;add 3 files.&quot; 查看当前仓库状态1git status 查看文件上次提交的差异1git diff readme.txt 查看提交历史记录1git log 简版显示提交历史记录1git log --pretty=oneline 回退上一个版本1git reset --hard HEAD^ 回退指定版本1git reset --hard 1094a 查看所有命令历史记录(git log在回退版本后会看不到回退前版本的记录，reflog可以看所有记录)1git reflog 查看工作区和版本库里面最新版本的区别(当前文件夹为工作区，add后是暂存区)1git diff HEAD -- readme.txt 将工作区文件恢复版本库版本1git checkout -- readme.txt 会有两种情况：一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。将暂存区文件版本丢弃，放回工作区1git reset HEAD readme.txt 从版本库删除文件12git rm test.txtgit commit -m &quot;remove test.txt&quot; 创建分支并切换到分支123456git checkout -b dev或git branch devgit checkout dev或git switch -c dev 查看当前分支，列出所有分支，当前分支前面会标一个*号1git branch 切换回主分支123git checkout master或git switch master 将指定分支合并到当前分支12快速合并git merge dev 12普通模式合并分支，可以通过log查看分支信息git merge --no-ff -m &quot;merge with no-ff&quot; dev 查看合并冲突1git status 合并冲突时要手动修改文件并提交 查看分支合并情况1git log --graph --pretty=oneline --abbrev-commit 删除分支1git branch -d dev 本地仓库关联码云1git remote add origin git@gitee.com:chinantfy/learngit.git 查看远程库信息1git remote -v 删除远程库1git remote rm origin 推送到gitee首次推送时加-u参数Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。 12git push -u origin mastergit push github master 本地仓库关联github1git remote add github git@github.com:chinantfy/learngit.git 暂时封存现在分支状态，在不提交的情况下就可以切换分支（默认有文件未提交时无法切换分支）1git stash 切换回封存的分支后查看封存状态1git stash list 恢复状态恢复状态并删除stash1git stash pop 恢复状态，删除stash12git stash apply stash@&#123;0&#125;git stash drop stash@&#123;0&#125; 复制一个特定的提交到当前分支1git cherry-pick 4c805e2","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://chinantfy.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"git常用命令","slug":"git常用命令","permalink":"https://chinantfy.gitee.io/tags/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"}]},{"title":"python基础命令","slug":"09.python基础命令","date":"2020-01-11T15:28:43.000Z","updated":"2020-02-29T16:18:11.516Z","comments":true,"path":"2020/01/11/09.python基础命令/","link":"","permalink":"https://chinantfy.gitee.io/2020/01/11/09.python%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/","excerpt":"本文参考：https://github.com/jackfrued/Python-100-Days https://www.liaoxuefeng.com/wiki/1016959663602400","text":"本文参考：https://github.com/jackfrued/Python-100-Days https://www.liaoxuefeng.com/wiki/1016959663602400 感谢两位大神的无私奉献 注释 单行注释 - 以#和空格开头的部分 多行注释 - 三个引号开头，三个引号结尾(单双引都可以) 变量和类型 整型 int 浮点型（小数） float 字符串型 str 布尔型 bool 只有两个值 True、False 复数型 complex 查看变量类型： 1234q = 1234type(q)int 变量命名 硬性规则： 变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。 大小写敏感（大写的a和小写的A是两个不同的变量）。 不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。 PEP 8要求： 用小写字母拼写，多个单词用下划线连接。 受保护的实例属性用单个下划线开头（后面会讲到）。 私有的实例属性用两个下划线开头（后面会讲到）。 当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到见名知意也是非常重要的。 变量的使用下面通过几个例子来说明变量的类型和变量使用。 12345678910111213\"\"\"使用变量保存数据并进行算术运算\"\"\"a = 321b = 123print(a + b) #444print(a - b) #198print(a * b) #39483print(a / b) #2.6097560975609757print(a // b) #2print(a % b) #75print(a ** b) #乘方 1234567891011121314\"\"\"使用type()检查变量的类型\"\"\"a = 100b = 12.345c = 1 + 5jd = 'hello, world'e = Trueprint(type(a)) # &lt;class 'int'&gt;print(type(b)) # &lt;class 'float'&gt;print(type(c)) # &lt;class 'complex'&gt;print(type(d)) # &lt;class 'str'&gt;print(type(e)) # &lt;class 'bool'&gt; 可以使用Python中内置的函数对变量类型进行转换。 int()：将一个数值或字符串转换成整数，可以指定进制。 float()：将一个字符串转换成浮点数。 str()：将指定的对象转换成字符串形式，可以指定编码。 chr()：将整数转换成该编码对应的字符串（一个字符）。 ord()：将字符串（一个字符）转换成对应的编码（整数）。 下面的代码通过键盘输入两个整数来实现对两个整数的算术运算。 12345678910111213141516\"\"\"使用input()函数获取键盘输入(字符串)使用int()函数将输入的字符串转换成整数使用print()函数输出带占位符的字符串\"\"\"a = int(input('a = '))b = int(input('b = '))print('%d + %d = %d' % (a, b, a + b))print('%d - %d = %d' % (a, b, a - b))print('%d * %d = %d' % (a, b, a * b))print('%d / %d = %f' % (a, b, a / b))print('%d // %d = %d' % (a, b, a // b))print('%d %% %d = %d' % (a, b, a % b))print('%d ** %d = %d' % (a, b, a ** b)) 说明：上面的print函数中输出的字符串使用了占位符语法，其中%d是整数的占位符，%f是小数的占位符，%%表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成%%），字符串之后的%后面跟的变量值会替换掉占位符然后输出到终端中，运行上面的程序，看看程序执行结果就明白啦。 运算符 运算符 描述 [] [:] 下标，切片 ** 指数 ~ + - 按位取反, 正负号 * / % // 乘，除，模，整除 + - 加，减 &gt;&gt; &lt;&lt; 右移，左移 &amp; 按位与 ^ | 按位异或，按位或 &lt;= &lt; &gt; &gt;= 小于等于，小于，大于，大于等于 == != 等于，不等于 is is not 身份运算符 in not in 成员运算符 not or and 逻辑运算符 = += -= *= /= %= //= **= &amp;= ` =^=&gt;&gt;=&lt;&lt;=` 说明： 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。 123456789\"\"\"赋值运算符和复合赋值运算符\"\"\"a = 10b = 3a += b # 相当于：a = a + ba *= a + 2 # 相当于：a = a * (a + 2)print(a) # 13 * 15 = 195 下面的例子演示了比较运算符（关系运算符）、逻辑运算符和身份运算符的使用。 12345678910111213141516171819\"\"\"比较、逻辑和算身份运算符的使用\"\"\"flag0 = 1 == 1flag1 = 3 &gt; 2flag2 = 2 &lt; 1flag3 = flag1 and flag2flag4 = flag1 or flag2flag5 = not (1 != 2)print('flag0 =', flag0) # flag0 = Trueprint('flag1 =', flag1) # flag1 = Trueprint('flag2 =', flag2) # flag2 = Falseprint('flag3 =', flag3) # flag3 = Falseprint('flag4 =', flag4) # flag4 = Trueprint('flag5 =', flag5) # flag5 = Falseprint(flag1 is True) # Trueprint(flag2 is not False) # False 分支结构1234567891011121314151617\"\"\"百分制成绩转换为等级制成绩\"\"\"score = float(input('请输入成绩: '))if score &gt;= 90: grade = 'A'elif score &gt;= 80: grade = 'B'elif score &gt;= 70: grade = 'C'elif score &gt;= 60: grade = 'D'else: grade = 'E'print('对应的等级是:', grade) 例：海伦公式 123456789101112131415\"\"\"判断输入的边长能否构成三角形，如果能则计算出三角形的周长和面积\"\"\"a = float(input('a = '))b = float(input('b = '))c = float(input('c = '))if a + b &gt; c and a + c &gt; b and b + c &gt; a: print('周长: %f' % (a + b + c)) p = (a + b + c) / 2 area = (p * (p - a) * (p - b) * (p - c)) ** 0.5 print('面积: %f' % (area))else: print('不能构成三角形') 循环结构for-in循环123456789\"\"\"用for循环实现1~100求和\"\"\"sum = 0for x in range(101): sum += xprint(sum) range(101)可以产生一个0到100的整数序列。 range(1, 100)可以产生一个1到99的整数序列。 range(1, 100, 2)可以产生一个1到99的奇数序列，其中2是步长，即数值序列的增量。 while循环如果要构造不知道具体循环次数的循环结构，我们推荐使用while循环。while循环通过一个能够产生或转换出bool值的表达式来控制循环，表达式的值为True循环继续，表达式的值为False循环结束。下面我们通过一个“猜数字”的小游戏（计算机出一个1~100之间的随机数，人输入自己猜的数字，计算机给出对应的提示信息，直到人猜出计算机出的数字）来看看如何使用while循环。 123456789101112131415161718192021222324\"\"\"猜数字游戏计算机出一个1~100之间的随机数由人来猜计算机根据人猜的数字分别给出提示大一点/小一点/猜对了\"\"\"import randomanswer = random.randint(1, 100)counter = 0while True: counter += 1 number = int(input('请输入: ')) if number &lt; answer: print('大一点') elif number &gt; answer: print('小一点') else: print('恭喜你猜对了!') breakprint('你总共猜了%d次' % counter)if counter &gt; 7: print('你的智商余额明显不足') 上面的代码中使用了break关键字来提前终止循环，需要注意的是break只能终止它所在的那个循环，这一点在使用嵌套的循环结构（下面会讲到）需要引起注意。除了break之外，还有另一个关键字是continue，它可以用来放弃本次循环后续的代码直接让循环进入下一轮。 练习 12345*************** 12345 * ** *** ********* 12345 * *** ***** **************** 答案1： 12345678910111213141516row = int(input('请输入行数: ')) + 1for i in range(1, row): q = '*' print(i * q) for i in range(1, row + 1): q = '*' print(' ' * (row - i), end='') print(i * q) for i in range(1, row + 1): q = '*' print(' ' * (row - i), end='') print((2*i - 1) * q) 答案2： 123456789101112131415161718192021row = int(input('请输入行数: '))for i in range(row): for _ in range(i + 1): print('*', end='') print()for i in range(row): for j in range(row): if j &lt; row - i - 1: print(' ', end='') else: print('*', end='') print()for i in range(row): for _ in range(row - i - 1): print(' ', end='') for _ in range(2 * i + 1): print('*', end='') print() 水仙花数123456for i in range(100, 1000): a = i // 100 # 百分位 b = i % 100 // 10 # 十分位 c = i % 10 # 个位 if a**3 + b**3 + c**3 == i: print(i) 12345678910\"\"\"正整数的反转\"\"\"num = int(input('num = '))reversed_num = 0while num &gt; 0: reversed_num = reversed_num * 10 + num % 10 num //= 10print(reversed_num) 123456789\"\"\"《百钱百鸡》问题\"\"\"for x in range(0, 20): for y in range(0, 33): z = 100 - x - y if 5 * x + 3 * y + z / 3 == 100: print('公鸡: %d只, 母鸡: %d只, 小鸡: %d只' % (x, y, z)) 斐波那契数列12345a = 0b = 1for _ in range(20): a, b = b, a + b print(a, end=' ') 100以内素数1234567for i in range(2, 100): q = True for y in range(2, i): if i % y == 0: q = False if q: print(i) 说明：素数指的是只能被1和自身整除的正整数（不包括1）。 函数和模块的使用定义函数123456789101112def factorial(num): \"\"\"求阶乘\"\"\" result = 1 for n in range(1, num + 1): result *= n return resultm = int(input('m = '))n = int(input('n = '))# 当需要计算阶乘的时候不用再写循环求阶乘而是直接调用已经定义好的函数print(factorial(m) // factorial(n) // factorial(m - n)) 函数的参数1234567891011121314151617181920212223242526from random import randintdef roll_dice(n=2): \"\"\"摇色子\"\"\" total = 0 for _ in range(n): total += randint(1, 6) return totaldef add(a=0, b=0, c=0): \"\"\"三个数相加\"\"\" return a + b + c# 如果没有指定参数那么使用默认值摇两颗色子print(roll_dice())# 摇三颗色子print(roll_dice(3))print(add())print(add(1))print(add(1, 2))print(add(1, 2, 3))# 传递参数时可以不按照设定的顺序进行传递print(add(c=50, a=100, b=200)) 用模块管理函数module1.py 12def foo(): print('hello, world!') module2.py 12def foo(): print('goodbye, world!') test.py 123456789from module1 import foo# 输出hello, world!foo()from module2 import foo# 输出goodbye, world!foo() 也可以按照如下所示的方式来区分到底要使用哪一个foo函数。 test.py 12345import module1 as m1import module2 as m2m1.foo()m2.foo() 需要说明的是，如果我们导入的模块除了定义函数之外还中有可以执行代码，那么Python解释器在导入这个模块时就会执行这些代码，事实上我们可能并不希望如此，因此如果我们在模块中编写了执行代码，最好是将这些执行代码放入如下所示的条件中，这样的话除非直接运行该模块，if条件下的这些代码是不会执行的，因为只有直接执行的模块的名字才是&quot;__main__&quot;。 module3.py 123456789101112131415def foo(): passdef bar(): pass# __name__是Python中一个隐含的变量它代表了模块的名字# 只有被Python解释器直接执行的模块的名字才是__main__if __name__ == '__main__': print('call foo()') foo() print('call bar()') bar() test.py 123import module3# 导入module3时 不会执行模块中if条件成立时的代码 因为模块的名字是module3而不是__main__ 函数格式1234567def main(): # Todo: Add your code here passif __name__ == '__main__': main() 字符串和常用数据结构字符串把单个或多个字符用单引号或者双引号包围起来，就可以表示一个字符串。 123456789101112131415161718s1 = 'hello, world!'s2 = \"hello, world!\"# 以三个双引号或单引号开头的字符串可以折行s3 = \"\"\"hello, world!\"\"\"print(s1, s2, s3, end='') # end''表示结尾不换行print(s1, end='')print(s2) # hello, world!hello, world!print(s1)print(s2) #hello, world!#hello, world! 字符串中使用\\（反斜杠）来表示转义，也就是说\\后面的字符不再是它原来的意义，例如：\\n不是代表反斜杠和字符n，而是表示换行；而\\t也不是代表反斜杠和字符t，而是表示制表符。所以如果想在字符串中表示&#39;要写成\\&#39;，同理想表示\\要写成\\\\。 在\\后面还可以跟一个八进制或者十六进制数来表示字符，例如\\141和\\x61都代表小写字母a，前者是八进制的表示法，后者是十六进制的表示法。也可以在\\后面跟Unicode字符编码来表示字符，例如\\u9a86\\u660a代表的是中文“骆昊”。 如果不希望字符串中的\\表示转义，我们可以通过在字符串的最前面加上字母r来加以说明 1234s1 = r'\\'hello, world!\\''s2 = r'\\n\\\\hello, world!\\\\\\n'print(s1, s2, end='')#输出： \\'hello, world!\\' \\n\\\\hello, world!\\\\\\n Python为字符串类型提供了非常丰富的运算符，我们可以使用+运算符来实现字符串的拼接，可以使用*运算符来重复一个字符串的内容，可以使用in和not in来判断一个字符串是否包含另外一个字符串（成员运算），我们也可以用[]和[:]运算符从字符串取出某个字符或某些字符（切片运算），代码如下所示。 字符串中位置由0位开始 1234567891011121314151617s1 = 'hello ' * 3print(s1) # hello hello hello s2 = 'world's1 += s2print(s1) # hello hello hello worldprint('ll' in s1) # Trueprint('good' in s1) # Falsestr2 = 'abc123456'# 从字符串中取出指定位置的字符(下标运算)print(str2[2]) # c# 字符串切片(从指定的开始索引到指定的结束索引)print(str2[2:5]) # c12print(str2[2:]) # c123456print(str2[2::2]) # c246print(str2[::2]) # ac246print(str2[::-1]) # 654321cbaprint(str2[-3:-1]) # 45 切片实际结束的位置是在指定结束索引之前，如print(str2[2:5]) 是指索引2，3，4对应的字符并不包含5对应的字符 常用字符串处理12345678910111213141516171819202122232425262728293031323334353637str1 = 'hello, world!'str11 = '武汉加油'# 通过内置函数len计算字符串的长度，非中文是指字符个数，一个汉字是1个长度print(len(str1)) # 13print(len(str11)) # 4# 获得字符串首字母大写的拷贝print(str1.capitalize()) # Hello, world!# 获得字符串每个单词首字母大写的拷贝print(str1.title()) # Hello, World!# 获得字符串变大写后的拷贝print(str1.upper()) # HELLO, WORLD!# 从字符串中查找子串所在位置print(str1.find('or')) # 8print(str1.find('shit')) # 找不到时返回-1# 与find类似但找不到子串时会引发异常# print(str1.index('or'))# print(str1.index('shit'))# 检查字符串是否以指定的字符串开头print(str1.startswith('He')) # Falseprint(str1.startswith('hel')) # True# 检查字符串是否以指定的字符串结尾print(str1.endswith('!')) # True# 将字符串以指定的宽度居中并在两侧填充指定的字符print(str1.center(50, '*'))# 将字符串以指定的宽度靠右放置左侧填充指定的字符print(str1.rjust(50, ' '))str2 = 'abc123456'# 检查字符串是否由数字构成print(str2.isdigit()) # False# 检查字符串是否以字母构成print(str2.isalpha()) # False# 检查字符串是否以数字和字母构成print(str2.isalnum()) # Truestr3 = ' jackfrued@126.com 'print(str3)# 获得字符串修剪左右两侧空格之后的拷贝print(str3.strip()) #相当于sql中的trim，去除两端空格 格式化输出12345678a, b = 5, 10print('%d * %d = %d' % (a, b, a * b))a, b = 5, 10print('&#123;0&#125; * &#123;1&#125; = &#123;2&#125;'.format(a, b, a * b))a, b = 5, 10print(f'&#123;a&#125; * &#123;b&#125; = &#123;a * b&#125;') 列表数值类型是标量类型，也就是说这种类型的对象没有可以访问的内部结构；而字符串类型是一种结构化的、非标量类型，所以才会有一系列的属性和方法。接下来我们要介绍的列表（list），也是一种结构化的、非标量类型，它是值的有序序列，每个值都可以通过索引进行标识，定义列表可以将列表的元素放在[]中，多个元素用,进行分隔，可以使用for循环对列表元素进行遍历，也可以使用[]或[:]运算符取出列表中的一个或多个元素。 查看或遍历列表12345678910111213141516171819202122232425262728293031list1 = [1, 3, 5, 7, 100]print(list1) # [1, 3, 5, 7, 100]# 乘号表示列表元素的重复list2 = ['hello'] * 3print(list2) # ['hello', 'hello', 'hello']# 计算列表长度(元素个数)print(len(list1)) # 5# 下标(索引)运算print(list1[0]) # 1print(list1[4]) # 100# print(list1[5]) # IndexError: list index out of rangeprint(list1[-1]) # 100print(list1[-3]) # 5list1[2] = 300 #改变索引2对应的值print(list1) # [1, 3, 300, 7, 100]# 通过循环用下标遍历列表元素for index in range(len(list1)): print(list1[index])# 通过for循环遍历列表元素for elem in list1: print(elem)# 通过enumerate函数处理列表之后再遍历可以同时获得元素索引和值for index, elem in enumerate(list1): print(index, elem)'''0 11 32 3003 74 100''' 如何向列表中添加元素以及如何从列表中移除元素。12345678910111213141516171819202122list1 = [1, 3, 5, 7, 100]# 添加元素list1.append(200) #[1, 3, 5, 7, 100, 200]在原来列表末尾增加list1.insert(1, 400) #[1, 400, 3, 5, 7, 100, 200]在指定索引插入，原元素依次后移# 合并两个列表# list1.extend([1000, 2000])list1 += [1000, 2000]print(list1) # [1, 400, 3, 5, 7, 100, 200, 1000, 2000]print(len(list1)) # 9# 先通过成员运算判断元素是否在列表中，如果存在就删除该元素if 3 in list1: list1.remove(3)if 1234 in list1: list1.remove(1234)print(list1) # [1, 400, 5, 7, 100, 200, 1000, 2000]# 从指定的位置删除元素list1.pop(0)list1.pop(len(list1) - 1)print(list1) # [400, 5, 7, 100, 200, 1000]# 清空列表元素list1.clear()print(list1) # [] 列表切片、复制12345678910111213fruits = ['grape', 'apple', 'strawberry', 'waxberry']fruits += ['pitaya', 'pear', 'mango']# 列表切片fruits2 = fruits[1:4]print(fruits2) # apple strawberry waxberry# 可以通过完整切片操作来复制列表fruits3 = fruits[:] #也可以直接写fruits3 = fruitsprint(fruits3) # ['grape', 'apple', 'strawberry', 'waxberry', 'pitaya', 'pear', 'mango']fruits4 = fruits[-3:-1]print(fruits4) # ['pitaya', 'pear']# 可以通过反向切片操作来获得倒转后的列表的拷贝fruits5 = fruits[::-1]print(fruits5) # ['mango', 'pear', 'pitaya', 'waxberry', 'strawberry', 'apple', 'grape'] 列表的排序1234567891011121314list1 = ['orange', 'apple', 'zoo', 'internationalization', 'blueberry']list2 = sorted(list1)# sorted函数返回列表排序后的拷贝不会修改传入的列表# 函数的设计就应该像sorted函数一样尽可能不产生副作用list3 = sorted(list1, reverse=True) #reverse -- 排序规则，reverse = True 降序 ， reverse = False 升序（默认）# 通过key关键字参数指定根据字符串长度进行排序而不是默认的字母表顺序list4 = sorted(list1, key=len)print(list1) #['orange', 'apple', 'zoo', 'internationalization', 'blueberry']print(list2) #['apple', 'blueberry', 'internationalization', 'orange', 'zoo']print(list3) #['zoo', 'orange', 'internationalization', 'blueberry', 'apple']print(list4) #['zoo', 'apple', 'orange', 'blueberry', 'internationalization']# 给列表对象发出排序消息直接在列表对象上进行排序，sort会修改原列表顺序list1.sort(reverse=True)print(list1) #['zoo', 'orange', 'internationalization', 'blueberry', 'apple']","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://chinantfy.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"python基础命令","slug":"python基础命令","permalink":"https://chinantfy.gitee.io/tags/python%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"}]},{"title":"anaconda配置及常用命令","slug":"08.anaconda配置及常用命令","date":"2020-01-11T12:11:18.000Z","updated":"2020-02-29T16:01:13.802Z","comments":true,"path":"2020/01/11/08.anaconda配置及常用命令/","link":"","permalink":"https://chinantfy.gitee.io/2020/01/11/08.anaconda%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"安装1sudo pacman -S anaconda在 ~/.bashrc 中添加1export PATH=/opt/anaconda/bin:$PATH","text":"安装1sudo pacman -S anaconda在 ~/.bashrc 中添加1export PATH=/opt/anaconda/bin:$PATH 激活 1source /opt/anaconda/bin/activate root zsh修改 ~/.zshrc 1export PATH=/opt/anaconda/bin:$PATH 1source ~/.zshrc conda常用命令环境123456789101112# 创建一个名为python34的环境，指定Python版本是3.4conda create --name python34 python=3.4# 激活某个环境activate python34 # for Windowssource activate python34 # for Linux &amp; Macdeactivate python34 # for Windowssource deactivate python34 # for Linux &amp; Mac# 删除一个已有的环境conda remove -n python34 --all python环境目录 ~/anaconda/envs 查看已安装的环境 conda info -e 包管理1234567891011121314# 安装xxxxconda install xxxx# 查看当前环境下已安装的包conda list# 查看某个指定环境的已安装包conda list -n python34# 查找package信息conda search numpy# 安装packageconda install -n python34 numpy # 如果不用-n指定环境名称，则被安装在当前活跃环境 也可以通过-c指定通过某个channel安装 参考链接：https://blog.csdn.net/guan__hua/article/details/61240932 Conda 更新1234567891011121314# 更新packageconda update -n python34 numpy# 删除packageconda remove -n python34 numpy# 更新conda，保持conda最新conda update conda# 更新anacondaconda update anaconda# 更新pythonconda update python Conda 源123456# 添加Anaconda的TUNA镜像conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/# TUNA的help中镜像地址加有引号，需要去掉# 设置搜索时显示通道地址conda config --set show_channel_urls yes Clone环境123conda create -n BBB --clone ~/path或者conda create -n BBB --clone AAA pip中国源常用中国源： 清华：https://pypi.tuna.tsinghua.edu.cn/simple 阿里云：http://mirrors.aliyun.com/pypi/simple/ 中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/ 华中理工大学：http://pypi.hustunique.com/ 山东理工大学：http://pypi.sdutlinux.org/ 豆瓣：http://pypi.douban.com/simple/ 临时使用1pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyspider Windows下C:\\Users\\xx\\pip，新建文件pip.ini 1234[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple[install]trusted-host=mirrors.aliyun.com Linux下~/.pip/pip.conf 没有就创建一个文件夹及文件 12mkdir -p ~/.pip/touch ~/.pip/pip.conf 1234[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple[install]trusted-host=mirrors.aliyun.com","categories":[{"name":"manjaro","slug":"manjaro","permalink":"https://chinantfy.gitee.io/categories/manjaro/"}],"tags":[{"name":"anaconda","slug":"anaconda","permalink":"https://chinantfy.gitee.io/tags/anaconda/"},{"name":"pip中国源","slug":"pip中国源","permalink":"https://chinantfy.gitee.io/tags/pip%E4%B8%AD%E5%9B%BD%E6%BA%90/"},{"name":"conda","slug":"conda","permalink":"https://chinantfy.gitee.io/tags/conda/"}]},{"title":"Terminator配置","slug":"07.terminator配置","date":"2020-01-11T11:32:32.000Z","updated":"2020-02-24T15:36:17.904Z","comments":true,"path":"2020/01/11/07.terminator配置/","link":"","permalink":"https://chinantfy.gitee.io/2020/01/11/07.terminator%E9%85%8D%E7%BD%AE/","excerpt":"terminator 自用配置备份gedit ~/.config/terminator/config12345678910111213141516171819202122232425262728293031323334353637[global_config] focus = system suppress_multiple_term_dialog = True title_transmit_bg_color = &quot;#d30102&quot;[keybindings][layouts] [[default]] [[[child1]]] parent = window0 profile = default type = Terminal [[[window0]]] parent = &quot;&quot; type = Window[plugins][profiles] [[default]] background_color = &quot;#002b36&quot; background_darkness = 0.76 background_type = transparent copy_on_selection = True cursor_color = &quot;#eee8d5&quot; font = Hack 16 foreground_color = &quot;#839496&quot; palette = &quot;#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3&quot; show_titlebar = False use_system_font = False [[solarized-dark]] background_color = &quot;#002b36&quot; cursor_color = &quot;#eee8d5&quot; foreground_color = &quot;#839496&quot; palette = &quot;#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3&quot; [[solarized-light]] background_color = &quot;#fdf6e3&quot; cursor_color = &quot;#002b36&quot; foreground_color = &quot;#657b83&quot; palette = &quot;#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3&quot;","text":"terminator 自用配置备份gedit ~/.config/terminator/config12345678910111213141516171819202122232425262728293031323334353637[global_config] focus = system suppress_multiple_term_dialog = True title_transmit_bg_color = &quot;#d30102&quot;[keybindings][layouts] [[default]] [[[child1]]] parent = window0 profile = default type = Terminal [[[window0]]] parent = &quot;&quot; type = Window[plugins][profiles] [[default]] background_color = &quot;#002b36&quot; background_darkness = 0.76 background_type = transparent copy_on_selection = True cursor_color = &quot;#eee8d5&quot; font = Hack 16 foreground_color = &quot;#839496&quot; palette = &quot;#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3&quot; show_titlebar = False use_system_font = False [[solarized-dark]] background_color = &quot;#002b36&quot; cursor_color = &quot;#eee8d5&quot; foreground_color = &quot;#839496&quot; palette = &quot;#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3&quot; [[solarized-light]] background_color = &quot;#fdf6e3&quot; cursor_color = &quot;#002b36&quot; foreground_color = &quot;#657b83&quot; palette = &quot;#073642:#dc322f:#859900:#b58900:#268bd2:#d33682:#2aa198:#eee8d5:#002b36:#cb4b16:#586e75:#657b83:#839496:#6c71c4:#93a1a1:#fdf6e3&quot; 效果图如下：","categories":[{"name":"manjaro","slug":"manjaro","permalink":"https://chinantfy.gitee.io/categories/manjaro/"}],"tags":[{"name":"terminator","slug":"terminator","permalink":"https://chinantfy.gitee.io/tags/terminator/"}]},{"title":"hexo配置过程","slug":"05.hexo配置过程","date":"2019-11-17T16:06:02.000Z","updated":"2020-02-24T15:36:17.904Z","comments":true,"path":"2019/11/18/05.hexo配置过程/","link":"","permalink":"https://chinantfy.gitee.io/2019/11/18/05.hexo%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B/","excerpt":"更换next主题hexo根目录执行1git clone https://github.com/theme-next/hexo-theme-next themes/next","text":"更换next主题hexo根目录执行1git clone https://github.com/theme-next/hexo-theme-next themes/next 修改hexo配置文件 1gedit _config.yml #或者vim_config.yml 修改 1theme: next 1hexo s 增加标签和分类修改主题的配置文件 1gedit ./themes/next/_config.yml 修改 1scheme: Mist #主题细类 下面三行去掉前面的#号 123tags: /tags/ || tags #标签categories: /categories/ || th #分类archives: /archives/ || archive #归档 hexo根目录执行命令，创建标签和分类的目录 12hexo new page &quot;archives&quot;hexo new page &quot;tags&quot; 修改标签目录下的md文件 1gedit ./source/tags/index.md 内容修改如下： 12345---title: 标签date: 2019-11-13 00:05:40type: tags--- 同理分类目录下的md文件修改为 12345---title: 分类date: 2019-11-13 00:04:08type: categories--- 1hexo clean &amp;&amp; hexo g #重新生成配置文件 在博客的md文件中开头加入 123456---title: hexo配置过程date: 2019-11-18 00:06:02categories: hexotags: --- 博客就会自动添加进分类和标签目录 添加本地搜索安装插件 1npm install hexo-generator-searchdb --save 修改博客配置文件 1gedit _config.yml 添加 12345search: path: search.xml field: post format: html limit: 10000 修改主题配置文件 1gedit ./themes/next/_config.yml 12local_search: enable: true 重新部署就可以使用搜索功能","categories":[{"name":"hexo","slug":"hexo","permalink":"https://chinantfy.gitee.io/categories/hexo/"}],"tags":[]},{"title":"hexo博客中加入图片","slug":"06.hexo博客中加入图片","date":"2019-11-17T13:06:02.000Z","updated":"2020-02-24T15:36:17.904Z","comments":true,"path":"2019/11/17/06.hexo博客中加入图片/","link":"","permalink":"https://chinantfy.gitee.io/2019/11/17/06.hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8A%A0%E5%85%A5%E5%9B%BE%E7%89%87/","excerpt":"编辑hexo配置文件_config.ymlpost_asset_folder: true运行hexo n &quot;xxxx&quot;来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹，博客用到的图片放到同名文件夹内，博客md文件中调用时直接用","text":"编辑hexo配置文件_config.ymlpost_asset_folder: true运行hexo n &quot;xxxx&quot;来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹，博客用到的图片放到同名文件夹内，博客md文件中调用时直接用 1&#123;% asset_img 7.png This is an example image %&#125; 其中7.png是图片名字，md文件中无法预览，但是生成的博客中可以看到","categories":[{"name":"hexo","slug":"hexo","permalink":"https://chinantfy.gitee.io/categories/hexo/"}],"tags":[{"name":"hexo博客中加入图片","slug":"hexo博客中加入图片","permalink":"https://chinantfy.gitee.io/tags/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8A%A0%E5%85%A5%E5%9B%BE%E7%89%87/"}]},{"title":"MANJARO 安装nexo并部署到码云","slug":"04.安装nexo并部署到码云","date":"2019-11-16T16:00:00.000Z","updated":"2020-02-24T15:36:17.904Z","comments":true,"path":"2019/11/17/04.安装nexo并部署到码云/","link":"","permalink":"https://chinantfy.gitee.io/2019/11/17/04.%E5%AE%89%E8%A3%85nexo%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0%E7%A0%81%E4%BA%91/","excerpt":"确认node.js环境以及它的包管理工具是否安装成功123node --versionnpm --version #manjaro默认没有按照npm，需要执行sudo pacman -S npm 安装git --version","text":"确认node.js环境以及它的包管理工具是否安装成功123node --versionnpm --version #manjaro默认没有按照npm，需要执行sudo pacman -S npm 安装git --version 将npm的下载源更换为国内的淘宝镜像1npm config set registry https://registry.npm.taobao.org 通过npm来安装Hexo1sudo npm install -g hexo-cli #亲测不用sudo的话manjaro下会提示无权限 搭建hexo博客123hexo init blog #注意：执行此命令后会在当前目录下新建blog文件夹cd blogls -lR 生成博客1hexo g 启动博客服务1hexo s 服务启动后显示如下 12INFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 这时候用浏览器访问http://localhost:4000 就可以访问刚刚搭建的本地hexo博客，Ctrl+C停止服务; 如果要修改服务器使用的端口，可以在启动服务器的时候加上-p参数；如果希望服务器启动后，自动打开默认的浏览器访问服务器，可以使用-o参数，如下所示。 1hexo s -p 8000 -o 修改博客配置文件1vim _config.yml 下面是YAML文件中相关选项的说明。 参数 描述 title 网站的标题 subtitle 网站的副标题 description 网站的描述 keywords 网站的关键词，可以用逗号分隔多个关键词 author 自己的名字 language 网站使用的语言 timezone 网站使用时区，默认使用电脑上设置的时区 url 网址 root 网站根目录 source_dir 资源文件夹，这个文件夹用来存放内容，默认source目录 public_dir 公共文件夹，这个文件夹用于存放生成的站点文件，默认public目录 tag_dir 标签文件夹，默认tags目录 archive_dir 归档文件夹，默认archives目录 category_dir 分类文件夹，默认categories目录 auto_spacing 在中文和英文之间加入空格，默认false titlecase 把标题转换为首字母大写，默认false external_link 在新标签中打开链接，默认true relative_link 把链接改为与根目录的相对位址，默认false default_category 默认分类 date_format 日期格式，默认YYYY-MM-DD time_format 时间格式，默认HH:mm:ss per_page 每页显示的文章数量 ，默认值10，0表示不使用分页 pagination_dir 分页目录，默认为page目录 theme 当前主题名称 deploy 部署部分的设置 我们将编写好的Markdown文件可以拷贝到source/_posts目录，我们可以在每个Markdown文件的上方添加Front-matter来对文件的布局、标题、分类、标签、发布日期等信息加以说明。所谓Front-matter，就是每个Markdown文件最上方以—分隔的区域，可以在Front-matter中设置以下内容。 参数 描述 默认值 layout 布局 title 标题 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章网址 例如： 123456789101112131415---title: Python编程惯例category: Python基础date: 2019-8-1---# Python惯例“惯例”这个词指的是“习惯的做法，常规的办法，一贯的做法”，与这个词对应的英文单词叫“idiom”。由于Python跟其他很多编程语言在语法和使用上还是有比较显著的差别，因此作为一个Python开发者如果不能掌握这些惯例，就无法写出“Pythonic”的代码。下面我们总结了一些在Python开发中的惯用的代码。1. 让代码既可以被导入又可以被执行。 if __name__ == &apos;__main__&apos;:2. 用下面的方式判断逻辑“真”或“假”。 if x: if not x: 完成之后执行如下命令重启hexo服务 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 托管到码云在码云新建仓库hexo修改博客项目的配置文件_config.yml1vim _config.yml 1234567# 省略上面的内容# Deployment# Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://gitee.com/chinantfy/hexo.git branch: master 上面的配置中，type指定了使用git进行项目部署，repo指定了部署项目的git仓库的URL，我们这里使用的是HTTPS的地址，如果之前配置过密钥对也可以使用SSH的地址，branch指定了将代码同步到仓库中的哪一个分支，通常master分支就是发布项目最终工作成果的分支，也称为项目的主分支。##3.上面的配置中，type指定了使用git进行项目部署，repo指定了部署项目的git仓库的URL，我们这里使用的是HTTPS的地址，如果之前配置过密钥对也可以使用SSH的地址，branch指定了将代码同步到仓库中的哪一个分支，通常master分支就是发布项目最终工作成果的分支，也称为项目的主分支。 1npm install hexo-deployer-git --save 设置gitee账号和邮箱12git config --global user.name &quot;YourName&quot; git config --global user.email &quot;email@example.com&quot; 可以使用下面的命令来实现一键部署到Gitee123hexo deploy -g或者hexo generate -d 如果没有配置ssh秘钥，此处会需要输入gitee账号和密码 开启gitee.pages码云仓库主界面点击服务》gitee pages 访问https://chinantfy.gitee.io/hexo 就可以打开博客，之后每次修改博客内容之后需要更新Gitee Pages。 访问码云的博客地址css不起作用，本地博客显示正常 解决方法： 编辑博客配置文件_config.yml root: / 修改为 root: /hexo/ hexo是码云的项目名称 修改完之后 12hexo clean &amp;&amp; hexo g hexo deploy -g 码云上的博客就访问正常了 配置gitee ssh秘钥生成秘钥对1ssh-keygen -t rsa -C &quot;email@example.com&quot; 连按三次enter键，会看到生成了 一个id_rsa.pub文件 将秘钥添加码云1cat ~/.ssh/id_rsa.pub 复制秘钥内容粘贴地址 https://gitee.com/profile/sshkeys 测试秘钥连接1ssh -T git@gitee.com manjaro18.1 报错如下 1vim ~/.ssh/config 文件添加一句 1IPQoS lowdelay throughput 再次执行ssh -T git@gitee.com 会显示 修改博客访问gitee方式为ssh修改博客项目的配置文件_config.yml 12repo: https://gitee.com/chinantfy/hexo.git 修改为repo: git@gitee.com:chinantfy/hexo.git #更换gitee登陆方式为ssh 再执行 1hexo deploy -g 这时候就不要输入账号密码了 npm报错 fseventsnpm报错 fsevents，忽略即可npm notice created a lockfile as package-lock.json. You should commit this file.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.9 (node_modules/nunjucks/node_modules/fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.9: wanted {“os”:”darwin”,”arch”:”any”} (current: {“os”:”linux”,”arch”:”x64”})npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.1.2 (node_modules/fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.2: wanted {“os”:”darwin”,”arch”:”any”} (current: {“os”:”linux”,”arch”:”x64”})","categories":[{"name":"manjaro","slug":"manjaro","permalink":"https://chinantfy.gitee.io/categories/manjaro/"},{"name":"hexo","slug":"hexo","permalink":"https://chinantfy.gitee.io/categories/hexo/"}],"tags":[{"name":"manjaro安装nexo并部署到码云","slug":"manjaro安装nexo并部署到码云","permalink":"https://chinantfy.gitee.io/tags/manjaro%E5%AE%89%E8%A3%85nexo%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0%E7%A0%81%E4%BA%91/"},{"name":"访问码云的博客地址css不起作用但是本地博客显示正常","slug":"访问码云的博客地址css不起作用但是本地博客显示正常","permalink":"https://chinantfy.gitee.io/tags/%E8%AE%BF%E9%97%AE%E7%A0%81%E4%BA%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%9C%B0%E5%9D%80css%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%E4%BD%86%E6%98%AF%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E6%98%BE%E7%A4%BA%E6%AD%A3%E5%B8%B8/"},{"name":"npm报错 fsevents","slug":"npm报错-fsevents","permalink":"https://chinantfy.gitee.io/tags/npm%E6%8A%A5%E9%94%99-fsevents/"},{"name":"manjaro连接ssh gitee 报错Broken pipe","slug":"manjaro连接ssh-gitee-报错Broken-pipe","permalink":"https://chinantfy.gitee.io/tags/manjaro%E8%BF%9E%E6%8E%A5ssh-gitee-%E6%8A%A5%E9%94%99Broken-pipe/"}]},{"title":"visual code去除标题栏","slug":"03.vscode去除标题栏","date":"2019-11-11T19:32:32.000Z","updated":"2020-02-24T15:36:17.904Z","comments":true,"path":"2019/11/12/03.vscode去除标题栏/","link":"","permalink":"https://chinantfy.gitee.io/2019/11/12/03.vscode%E5%8E%BB%E9%99%A4%E6%A0%87%E9%A2%98%E6%A0%8F/","excerpt":"","text":"在设置Visual Studio Code的窗口中，有Title Bar Style选项可以设置,选择custom ，就可以去掉大大的标题栏，其他系统中此方法应该也可以。","categories":[{"name":"manjaro","slug":"manjaro","permalink":"https://chinantfy.gitee.io/categories/manjaro/"}],"tags":[{"name":"vscode","slug":"vscode","permalink":"https://chinantfy.gitee.io/tags/vscode/"}]},{"title":"MANJARO 命令审计","slug":"02.MANJARO命令审计","date":"2019-11-11T18:32:32.000Z","updated":"2020-02-24T15:36:17.904Z","comments":true,"path":"2019/11/12/02.MANJARO命令审计/","link":"","permalink":"https://chinantfy.gitee.io/2019/11/12/02.MANJARO%E5%91%BD%E4%BB%A4%E5%AE%A1%E8%AE%A1/","excerpt":"bash下配置最近在折腾manjaro xfce 版本，实现命令审计参考如下博客https://blog.51cto.com/13227377/2159238具体操作如下:在/etc/profile后面添加","text":"bash下配置最近在折腾manjaro xfce 版本，实现命令审计参考如下博客https://blog.51cto.com/13227377/2159238具体操作如下:在/etc/profile后面添加 123456#historyexport HISTSIZE=4096DT=`date +&quot;%Y-%m-%d&quot;`export HISTFILE=&quot;/opt/history/$&#123;LOGNAME&#125;_history.log&quot;chmod 600 /opt/history/$&#123;LOGNAME&#125; 2&gt;/dev/nullexport PROMPT_COMMAND=&apos;&#123; date &quot;+%Y-%m-%d %T #### $(whoami) #### $(history 1 | &#123; read x cmd; echo &quot;$cmd&quot;; &#125;)&quot;; &#125;&gt;&gt;$HISTFILE&apos; 添加完发现PROMPT_COMMAND变量没有生效，也就是打开log文件里log的记录格式没有改变，后来发现用户环境变量重置了PROMPT_COMMAND第一步：1sudo gedit /etc/bash.bashrc 将下面这一段注释掉 123456789#case $&#123;TERM&#125; in# xterm*|rxvt*|Eterm|aterm|kterm|gnome*)# PROMPT_COMMAND=$&#123;PROMPT_COMMAND:+$PROMPT_COMMAND; &#125;&apos;printf &quot;\\033]0;%s@%s:%s\\007&quot; &quot;$&#123;USER&#125;&quot; &quot;$&#123;HOSTNAME%%.*&#125;&quot; &quot;$&#123;PWD/#$HOME/\\~&#125;&quot;&apos;# ;;# screen*)# PROMPT_COMMAND=$&#123;PROMPT_COMMAND:+$PROMPT_COMMAND; &#125;&apos;printf &quot;\\033_%s@%s:%s\\033\\\\&quot; &quot;$&#123;USER&#125;&quot; &quot;$&#123;HOSTNAME%%.*&#125;&quot; &quot;$&#123;PWD/#$HOME/\\~&#125;&quot;&apos;# ;;#esac 第二步：1gedit ~/.bashrc 将下面这一段注释掉 123456789# Change the window title of X terminals#case $&#123;TERM&#125; in# xterm*|rxvt*|Eterm*|aterm|kterm|gnome*|interix|konsole*)# PROMPT_COMMAND=&apos;echo -ne &quot;\\033]0;$&#123;USER&#125;@$&#123;HOSTNAME%%.*&#125;:$&#123;PWD/#$HOME/\\~&#125;\\007&quot;&apos;# ;;# screen*)# PROMPT_COMMAND=&apos;echo -ne &quot;\\033_$&#123;USER&#125;@$&#123;HOSTNAME%%.*&#125;:$&#123;PWD/#$HOME/\\~&#125;\\033\\\\&quot;&apos;# ;;#esac 第三步：12source /etc/bash.bashrcsource ~/.bashrc 这一刻history.log中的格式就已经改为命令审计中设置的格式 zsh配置12sudo mkdir -p /opt/history/sudo chmod 777 /opt/history gedit ~/.zshrc 123456#historyexport HISTSIZE=4096DT=`date +&quot;%Y-%m-%d&quot;`export HISTFILE=&quot;/opt/history/$&#123;LOGNAME&#125;_history.log&quot;chmod 600 /opt/history/$&#123;LOGNAME&#125; 2&gt;/dev/nullexport PROMPT_COMMAND=&apos;&#123; date &quot;+%Y-%m-%d %T #### $(whoami) #### $(history 1 | &#123; read x cmd; echo &quot;$cmd&quot;; &#125;)&quot;; &#125;&gt;&gt;$HISTFILE&apos; 12source ~/.zshrc`` 查看history 1fc -li","categories":[{"name":"manjaro","slug":"manjaro","permalink":"https://chinantfy.gitee.io/categories/manjaro/"}],"tags":[]},{"title":"MANJARO 安装配置","slug":"01.MANJARO安装配置","date":"2019-11-11T16:00:01.000Z","updated":"2020-03-02T10:46:48.666Z","comments":true,"path":"2019/11/12/01.MANJARO安装配置/","link":"","permalink":"https://chinantfy.gitee.io/2019/11/12/01.MANJARO%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/","excerpt":"更改manjaro的国内源12sudo pacman-mirrors -i -c China -m ranksudo pacman -Syy","text":"更改manjaro的国内源12sudo pacman-mirrors -i -c China -m ranksudo pacman -Syy 设置archlinux国内源12sudo pacman -S geditsudo gedit /etc/pacman.conf 写入如下内容 123[archlinuxcn]SigLevel = Optional TrustedOnlyServer = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch 执行命令： 12sudo pacman -Syy sudo pacman -S archlinuxcn-keyring 更改项目文件英文名1234sudo pacman -S xdg-user-dirs-gtkexport LANG=en_USxdg-user-dirs-gtk-update #然后会有个窗口提示语言更改，更新名称即可export LANG=zh_CN.UTF-8 #然后重启电脑如果提示语言更改，保留旧的名称即可 安装搜狗输入法1234sudo pacman -S fcitx-im sudo pacman -S fcitx-configtoolsudo pacman -S fcitx-sogoupinyinsudo pacman -S fcitx-qt4 注意：截至到2019.07.07，搜狗拼音的版本fcitx-sogoupiny为2.2.X，需要fcitx-qt4支持，但是ArchLinux已经从Comminuty库中删除了fcitx-qt4，默认会安装fcitx-qt5，因此搜狗输入法安装后不会起作用，我这里是重新安装了fcitx-qt4，配置完成之后搜狗输入法可以正常使用 配置环境变量1sudo gedit ~/.xprofile 写入如下内容： 123export GTK_IM_MODULE=fcitxexport QT_IM_MODULE=fcitxexport XMODIFIERS=&quot;@im=fcitx&quot; 重启电脑之后搜狗输入法就可以正常使用了 安装常用软件123456789101112131415161718192021222324252627sudo pacman -S yaysudo hwclock --systohc --localtime #解决双系统时间不一致问题sudo pacman -S base-devel #安装deepin微信需要的依赖yay -S deepin.com.qq.officeyay -S deepin-wine-wechatsudo pacman -S electronic-wechatsudo pacman -S visual-studio-code-binsudo pacman -S deepin-screenshot #深度截图sudo pacman -S deepin-terminal #深度终端sudo pacman -S deepin-file-manager #深度文件管理器sudo pacman -S deepin-editor #深度编辑器sudo pacman -S screenfetchsudo pacman -S google-chromesudo pacman -S open-vm-tools #虚拟机安装vmware-toolssudo pacman -S pepper-flashsudo pacman -S flashpluginsudo pacman -S wps-officesudo pacman -S ttf-wps-fontssudo pacman -S thefucksudo pacman -S terminatorsudo pacman -S anacondasudo pacman -S typorayay -S wps-office-mui-zh-cn #解决wps默认显示为英文问题sudo pacman -S netease-cloud-musicpacman -S --noconfirm XXX # --noconfirm隐藏每次安装软解时的是否确认安装提示sudo pacman -S clang make cmake gdb # 编译调试环境sudo pacman -S vim # 命令行下的编辑器 解决网易云音乐无法输入中文参考 https://aur.archlinux.org/packages/netease-cloud-music/大致思路：使用@springzfx 提供的代码编译qcef， https://github.com/springzfx/archlinux/tree/master/netease-cloud-music 使用@laomocode 提供的PKGBUILD文件编译安装网易云音乐 https://gitee.com/laomocode/netease-cloud-music，完美解决分别下载两个链接中的文件夹 1234567891011121314#安装依赖sudo pacman -S gconfsudo pacman -S qt5-webchannelsudo pacman -S cmakesudo pacman -S qt5-tools#编译qcer1719108869217191088692cd qcefmakepkg -sicd netease-cloud-musicmakepkg -sisudo gedit /opt/netease/netease-cloud-music/netease-cloud-music.bash将下面第一句注释掉，并加入第二句#export LD_LIBRARY_PATH=&quot;$&#123;HERE&#125;&quot;/libsexport LD_LIBRARY_PATH=/usr/lib 此时无法输入中文的问题已解决 解决网易云音乐双标题栏问题在网易云音乐桌面图标右键》编辑启动器》把命令修改为 1env XDG_CURRENT_DESKTOP=DDE netease-cloud-music %U 解决网易云音乐打开默认全屏，无法缩小窗口参考 https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=155383&amp;extra= 删除 ~/.cache/netease-cloud-music 目录 安装中文字体123sudo pacman -S wqy-bitmapfont wqy-microhei wqy-microhei-lite wqy-zenheisudo pacman -S noto-fonts-cjk adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fontssudo pacman -S ttf-ubuntu-font-family 美化主题包安装12345sudo pacman -S paper-icon-themesudo pacman -S mcmojave-circle-icon-theme-gitsudo pacman -S human-icon-themesudo pacman -S deepin-iconthemes-manjarosudo pacman -S andromeda-icon-theme pacman 常用命令12345678910111213pacman -S package_name # 安装软件 pacman -S extra/package_name # 安装不同仓库中的版本pacman -Syu # 升级整个系统，y是更新数据库，yy是强制更新，u是升级软件pacman -Ss string # 在包数据库中查询软件pacman -Si package_name # 显示软件的详细信息pacman -Sc # 清除软件缓存，即/var/cache/pacman/pkg目录下的文件pacman -R package_name # 删除单个软件pacman -Rs package_name # 删除指定软件及其没有被其他已安装软件使用的依赖关系pacman -Qs string # 查询已安装的软件包pacman -Qi package_name # 查询本地安装包的详细信息pacman -Ql package_name # 获取已安装软件所包含的文件的列表pacman -U package.tar.zx # 从本地文件安装pactree package_name # 显示软件的依赖树 安装oh-my-zsh1234sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestionsgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting zsh配置文件备份： ~/.zshrc 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113# If you come from bash you might have to change your $PATH.# export PATH=$HOME/bin:/usr/local/bin:$PATH# Path to your oh-my-zsh installation.export ZSH=\"/home/chen/.oh-my-zsh\"# Set name of the theme to load --- if set to \"random\", it will# load a random theme each time oh-my-zsh is loaded, in which case,# to know which specific one was loaded, run: echo $RANDOM_THEME# See https://github.com/ohmyzsh/ohmyzsh/wiki/ThemesZSH_THEME=\"ys\"# Set list of themes to pick from when loading at random# Setting this variable when ZSH_THEME=random will cause zsh to load# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/# If set to an empty array, this variable will have no effect.# ZSH_THEME_RANDOM_CANDIDATES=( \"robbyrussell\" \"agnoster\" )# Uncomment the following line to use case-sensitive completion.# CASE_SENSITIVE=\"true\"# Uncomment the following line to use hyphen-insensitive completion.# Case-sensitive completion must be off. _ and - will be interchangeable.# HYPHEN_INSENSITIVE=\"true\"# Uncomment the following line to disable bi-weekly auto-update checks.# DISABLE_AUTO_UPDATE=\"true\"# Uncomment the following line to automatically update without prompting.# DISABLE_UPDATE_PROMPT=\"true\"# Uncomment the following line to change how often to auto-update (in days).# export UPDATE_ZSH_DAYS=13# Uncomment the following line if pasting URLs and other text is messed up.# DISABLE_MAGIC_FUNCTIONS=true# Uncomment the following line to disable colors in ls.# DISABLE_LS_COLORS=\"true\"# Uncomment the following line to disable auto-setting terminal title.# DISABLE_AUTO_TITLE=\"true\"# Uncomment the following line to enable command auto-correction.# ENABLE_CORRECTION=\"true\"# Uncomment the following line to display red dots whilst waiting for completion.# COMPLETION_WAITING_DOTS=\"true\"# Uncomment the following line if you want to disable marking untracked files# under VCS as dirty. This makes repository status check for large repositories# much, much faster.# DISABLE_UNTRACKED_FILES_DIRTY=\"true\"# Uncomment the following line if you want to change the command execution time# stamp shown in the history command output.# You can set one of the optional three formats:# \"mm/dd/yyyy\"|\"dd.mm.yyyy\"|\"yyyy-mm-dd\"# or set a custom format using the strftime function format specifications,# see 'man strftime' for details.# HIST_STAMPS=\"mm/dd/yyyy\"# Would you like to use another custom folder than $ZSH/custom?# ZSH_CUSTOM=/path/to/new-custom-folder# Which plugins would you like to load?# Standard plugins can be found in ~/.oh-my-zsh/plugins/*# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/# Example format: plugins=(rails git textmate ruby lighthouse)# Add wisely, as too many plugins slow down shell startup.plugins=(git z vscode zsh-autosuggestions zsh-syntax-highlighting sudo history thefuck extract)source $ZSH/oh-my-zsh.sh# User configuration# export MANPATH=\"/usr/local/man:$MANPATH\"# You may need to manually set your language environment# export LANG=en_US.UTF-8# Preferred editor for local and remote sessions# if [[ -n $SSH_CONNECTION ]]; then# export EDITOR='vim'# else# export EDITOR='mvim'# fi# Compilation flags# export ARCHFLAGS=\"-arch x86_64\"# Set personal aliases, overriding those provided by oh-my-zsh libs,# plugins, and themes. Aliases can be placed here, though oh-my-zsh# users are encouraged to define aliases within the ZSH_CUSTOM folder.# For a full list of active aliases, run `alias`.## Example aliases# alias zshconfig=\"mate ~/.zshrc\"# alias ohmyzsh=\"mate ~/.oh-my-zsh\"#historyexport HISTSIZE=4096DT=`date +\"%Y-%m-%d\"`export HISTFILE=\"/opt/history/$&#123;LOGNAME&#125;_history.log\"chmod 600 /opt/history/$&#123;LOGNAME&#125; 2&gt;/dev/nullexport PROMPT_COMMAND='&#123; date \"+%Y-%m-%d %T #### $(whoami) #### $(history 1 | &#123; read x cmd; echo \"$cmd\"; &#125;)\"; &#125;&gt;&gt;$HISTFILE'export PATH=\"/home/chen/.conda/envs/py37/bin:/opt/anaconda/bin:$PATH\"alias hr='hexo clean &amp;&amp; hexo g &amp;&amp; hexo s'alias hp='hexo deploy -g'alias py37='source activate py37'alias edit='deepin-editor'HIST_STAMPS=\"yyyy-mm-dd\" 终端代理（本人已弃用此方法，改用v2raya）1yay -S proxychains-ng 编辑proxychains.conf文件，将socks4 127.0.0.1 9095修改为socks5 127.0.0.1 1080 123sudo gedit /etc/proxychains.conf#找到最后一行，修改为socks5 127.0.0.1 1080 用法 1proxychains curl www.google.com 参考链接https://oceandlnu.github.io/2018/05/29/Manjaro%20%E6%97%A5%E5%B8%B8%E9%85%8D%E7%BD%AE/ 科学上网1yay -S v2raya 点击v2raya图标,会自动打开浏览器管理ssr配置，配置ssr链接后终端和浏览器都可以科学上网，配置中全局透明代理和pac模式可以选择大陆白名单或者GFWlist 安装vmware1234567891011sudo pacman -S fuse2 gtkmm pcsclite libcanberra #安装依赖sudo pacman -S linux54-headers #先通过uname -r 确认内核版本，选择对应版本的linux-headers,如我的电脑是5.4.22-1-MANJARO，则安装linux54yay -S --noconfirm --needed ncurses5-compat-libsyay -S vmware-workstation#启动服务sudo systemctl enable vmware-networks.service vmware-usbarbitrator.service vmware-hostd.servicesudo systemctl start vmware-networks.service vmware-usbarbitrator.service vmware-hostd.service#检查服务sudo systemctl status vmware-networks.service vmware-usbarbitrator.service vmware-hostd.service#检查服务后会有个别服务显示未启动，重启主机后所有服务正常启动sudo reboot 解决vmware for linux运行虚拟机卡顿的问题vmware安装完成之后发现同一个虚拟机文件，在Windows系统的vmware中不卡顿，在manjaro中非常卡顿，解决方法如下： Edit -&gt; Preferences -&gt; Memory，在Additional Memory选项中，选择第一项 Fit all virtual machine memory into reserved host RAM #更改此选项需要root用户允行vmware sudo vmware 然后修改上述信息即可 参考链接 https://insidelinuxdev.net/article/a06amj.html 安装色温软件 redshift1sudo pacman -S redshift 不知道什么原因我电脑识别的经纬与实际有误，造成白天模式和夜晚模式颠倒，重新配置如下： 12touch ~/.config/redshift.confgedit ~/.config/redshift.conf 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556; Global settings for redshift[redshift]; Set the day and night screen temperaturestemp-day=6000temp-night=5000 ; Enable/Disable a smooth transition between day and night; 0 will cause a direct change from day to night screen temperature.; 1 will gradually increase or decrease the screen temperature.transition=1 ; Set the screen brightness. Default is 1.0.;brightness=0.9; It is also possible to use different settings for day and night; since version 1.8.;brightness-day=0.7;brightness-night=0.4; Set the screen gamma (for all colors, or each color channel; individually)gamma=0.8;gamma=0.8:0.7:0.8; This can also be set individually for day and night since; version 1.10.;gamma-day=0.8:0.7:0.8;gamma-night=0.6 ; Set the location-provider: geoclue, geoclue2, manual; type redshift -l list to see possible values.; The location provider settings are in a different section.location-provider=manual ; Set the adjustment-method: randr, vidmode; type redshift -m list to see all possible values.; randr is the preferred method, vidmode is an older API.; but works in some cases when randr does not.; The adjustment method settings are in a different section.adjustment-method=randr ; Configuration of the location-provider:; type redshift -l PROVIDER:help to see the settings.; ex: redshift -l manual:help; Keep in mind that longitudes west of Greenwich (e.g. the Americas); are negative numbers.[manual]lat=39.92lon=116.46 ; Configuration of the adjustment-method; type redshift -m METHOD:help to see the settings.; ex: redshift -m randr:help; In this example, randr is configured to adjust screen 1.; Note that the numbering starts from 0, so this is actually the; second screen. If this option is not specified, Redshift will try; to adjust _all_ screens.[randr]screen=0 temp-day=6000temp-night=5000 分别是白天模式和夜晚模式的色温， lat=39.92lon=116.46 分别为北纬和东经，我这里是网上搜索的北京的经纬 1redshift -c ~/.config/redshift.conf #加载配置，Ctrl+c退出后，从开始程序点击图标启动redshift会自动加载配置 中文字体渲染美化 + 去模糊 解压 freetype2-ultimate5.tar.gz 和 lib32-freetype2-ultimate5.tar.gz 两个压缩包，分别按照里面的《安装方法》操作； 解压安装 lulinux_fontsConf_181226.tar.gz，按里面的安装说明操作； 开启字体渲染： 打开 外观，更改字体 默认字体：微软雅黑 Regular默认等宽自体：Monospace Regular启用抗锯齿 &gt; 提示：全部 文件链接: https://pan.baidu.com/s/1BpQ9KDc-RUZNclSNFnfknA 提取码: kaiy xfce更换dde(deepin桌面)1234567sudo pacman -S deepin deepin-extra #安装ddesudo cp /etc/lightdm/lightdm.conf /etc/lightdm/lightdm.conf.bak #备份lightdm配置文件#修改配置文件中环境为ddesudo sed -i 's/greeter-session=lightdm-.*/greeter-session=lightdm-deepin-greeter/g' /etc/lightdm/lightdm.confsudo sed -i 's/user-session=xfce/user-session=deepin/g' /etc/lightdm/lightdm.conf#重启，右下角选择dde#如重启后还是进入xfce，则将配置文件中autologin-user一行注释掉 dde中gtk主题无法切换在dde设置中切换主题后，只能修改启动器中图标，桌面图标修改不生效，查阅资料发现manjaro有自己的gtk主题设置程序，与dde设置冲突，在启动器中搜索Qt5设置修改图标和字体后manjaro的dde环境桌面图标就修改了，成品如下： 双显示器设置开机默认显示器我的电脑是笔记本外接显示器，在系统设置中已经关闭笔记本显示器，但是每次锁屏或者重启需要输入密码的时候，笔记本显示器都会自动打开，解决方法如下 123sudo gedit /etc/lightdm/lightdm.conf #修改lightdm配置文件#增加一行display-setup-script=xrandr --output HDMI1 --primary Aria2+AriaNg123456sudo pacman -S aria2 #安装aria2mkdir ~/aria2 #建立配置目录，下面配置文件中的input-file，save-session，on-download-complete都用到了此目录cd ~/aria2touch aria2.conf #创建配置文件touch aria2.session #创建下载记录gedit aria2.conf #修改配置文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118# touch /data/aria2.session# vim /etc/aria2/aria2.conf## &apos;#&apos;开头为注释内容, 选项都有相应的注释说明, 根据需要修改 #### 被注释的选项填写的是默认值, 建议在需要修改时再取消注释 #### 文件保存相关 ### 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置dir=/home/Downloads/ # 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M#disk-cache=32M#disk-cache=32M# 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc# 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc# falloc和trunc则需要文件系统和内核支持# NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项file-allocation=prealloc# 断点续传continue=true## 下载连接相关 ### 最大同时下载任务数, 运行时可修改, 默认:5max-concurrent-downloads=10# 同一服务器连接数, 添加时可指定, 默认:1max-connection-per-server=10# 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M# 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载min-split-size=10M# 单个任务最大线程数, 添加时可指定, 默认:5split=5# 整体下载速度限制, 运行时可修改, 默认:0#max-overall-download-limit=0# 单个任务下载速度限制, 默认:0#max-download-limit=0# 整体上传速度限制, 运行时可修改, 默认:0#max-overall-upload-limit=0# 单个任务上传速度限制, 默认:0#max-upload-limit=0# 禁用IPv6, 默认:falsedisable-ipv6=true## 进度保存相关 ### 从会话文件中读取下载任务input-file=/home/chen/aria2/aria2.session# 在Aria2退出时保存`错误/未完成`的下载任务到会话文件save-session=/home/chen/aria2/aria2.session# 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0save-session-interval=60## RPC相关设置 ##enable-rpc=truepause=falserpc-allow-origin-all=truerpc-listen-all=truerpc-save-upload-metadata=truerpc-secure=false# 启用RPC, 默认:false#enable-rpc=true# 允许所有来源, 默认:false#rpc-allow-origin-all=true# 允许非外部访问, 默认:false#rpc-listen-all=true# 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同#event-poll=select# RPC监听端口, 端口被占用时可以修改, 默认:6800rpc-listen-port=6800# 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项#rpc-secure=191278299# 设置的RPC访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项#rpc-user=&lt;USER&gt;# 设置的RPC访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项#rpc-passwd=&lt;PASSWD&gt;## BT/PT下载相关 ### 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true#follow-torrent=true# BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999listen-port=51413# 单个种子最大连接数, 默认:55#bt-max-peers=55# 打开DHT功能, PT需要禁用, 默认:trueenable-dht=true# 打开IPv6 DHT功能, PT需要禁用#enable-dht6=false# DHT网络监听端口, 默认:6881-6999#dht-listen-port=6881-6999# 本地节点查找, PT需要禁用, 默认:falsebt-enable-lpd=true# 种子交换, PT需要禁用, 默认:trueenable-peer-exchange=false# 每个种子限速, 对少种的PT很有用, 默认:50K#bt-request-peer-speed-limit=50K# 客户端伪装, PT需要#peer-id-prefix=-TR2770-user-agent=Transmission/2.92#user-agent=netdisk;4.4.0.6;PC;PC-Windows;6.2.9200;WindowsBaiduYunGuanJia# 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0seed-ratio=1.0#作种时间大于30分钟，则停止作种seed-time=30# 强制保存会话, 话即使任务已经完成, 默认:false# 较新的版本开启后会在任务完成后依然保留.aria2文件#force-save=false# BT校验相关, 默认:true#bt-hash-check-seed=true# 继续之前的BT任务时, 无需再次校验, 默认:falsebt-seed-unverified=true# 保存磁力链接元数据为种子文件(.torrent文件), 默认:falsebt-save-metadata=true#下载完成后删除.ara2的同名文件on-download-complete=/home/chen/aria2/delete_aria2#on-download-complete=/home/pi/aria2/rasp.sh 12sudo touch /lib/systemd/system/aria2.servicesudo gedit /lib/systemd/system/aria2.service 123456789101112[Unit]Description= aria2After=network.target [Service]#PIDFile=/run/aria2.pidExecStart=aria2c -c --conf-path=/home/chen/aria2/aria2.conf &amp;ExecStop=/bin/kill $MAINPIDRestartSec=always [Install]WantedBy=multi-user.target 12systemctl start aria2.service #启动服务systemctl enable aria2.service #开机自启 谷歌浏览器安装Aria2 manager扩展，自动接管下载到aria2 Aria2 manager连接配置（单击浏览器扩展）： Aria2 manager自动接管设置（扩展图标右键设置）：","categories":[{"name":"manjaro","slug":"manjaro","permalink":"https://chinantfy.gitee.io/categories/manjaro/"}],"tags":[]}]}